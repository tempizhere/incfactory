name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Assistant image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/assistant/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-assistant:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push LLM Service image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/llm-service/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-llm-service:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Processor image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/processor/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-processor:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Fetcher image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/fetcher/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-fetcher:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate Docker Compose file for production
      if: github.event_name != 'pull_request'
      run: |
        cat > docker-compose.yml << EOF
        version: '3.8'

        services:
          # RabbitMQ
          rabbitmq:
            image: rabbitmq:4.1.0-management
            container_name: rabbitmq
            hostname: rabbitmq
            restart: always
            environment:
              - RABBITMQ_DEFAULT_USER=\${RABBITMQ_USER}
              - RABBITMQ_DEFAULT_PASS=\${RABBITMQ_PASS}
              - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
            ports:
              - "5672:5672"
              - "15672:15672"
            volumes:
              - rabbitmq_data:/var/lib/rabbitmq
            networks: {}

          # Postgres + pgvector
          kaiten-test-db:
            image: pgvector/pgvector:pg17
            container_name: kaiten-test-db
            restart: always
            environment:
              - POSTGRES_USER=\${DB_USER}
              - POSTGRES_PASSWORD=\${DB_PASSWORD}
              - POSTGRES_DB=\${DB_NAME}
            ports:
              - "5436:5432"
            volumes:
              - db:/var/lib/postgresql/data
              - ./scripts/migrations.sql:/docker-entrypoint-initdb.d/01-migrations.sql:ro
              - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/02-init-db.sh:ro
            networks: {}

          # Основные сервисы
          assistant:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-assistant:${{ steps.meta.outputs.version }}
            restart: unless-stopped
            ports:
              - "8080:8080"
            environment:
              - SERVICE=assistant
              - RABBITMQ_HOST=rabbitmq
              - RABBITMQ_PORT=5672
              - RABBITMQ_USER=\${RABBITMQ_USER}
              - RABBITMQ_PASS=\${RABBITMQ_PASS}
              - DB_HOST=kaiten-test-db
              - DB_PORT=5432
              - DB_USER=\${DB_USER}
              - DB_PASSWORD=\${DB_PASSWORD}
              - DB_NAME=\${DB_NAME}
            depends_on:
              - llm-service
              - processor
              - rabbitmq
              - kaiten-test-db
            healthcheck:
              test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s

          llm-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-llm-service:${{ steps.meta.outputs.version }}
            restart: unless-stopped
            environment:
              - SERVICE=llm-service
              - RABBITMQ_HOST=rabbitmq
              - RABBITMQ_PORT=5672
              - RABBITMQ_USER=\${RABBITMQ_USER}
              - RABBITMQ_PASS=\${RABBITMQ_PASS}
              - EMBEDDING_HOST=\${EMBEDDING_HOST}
              - EMBEDDING_API_KEY=\${EMBEDDING_API_KEY}
              - EMBEDDING_PROVIDER=\${EMBEDDING_PROVIDER}
              - EMBEDDING_MODEL=\${EMBEDDING_MODEL}
              - LLM_HOST=\${LLM_HOST}
              - LLM_API_KEY=\${LLM_API_KEY}
              - LLM_PROVIDER=\${LLM_PROVIDER}
              - LLM_MODEL=\${LLM_MODEL}
              - EMBEDDING_RATE_LIMIT=\${EMBEDDING_RATE_LIMIT:-10}
              - LLM_RATE_LIMIT=\${LLM_RATE_LIMIT:-5}
              - LLM_MAX_RETRIES=\${LLM_MAX_RETRIES:-3}
              - EMBEDDING_MAX_RETRIES=\${EMBEDDING_MAX_RETRIES:-3}
              - LLM_RETRY_DELAY=\${LLM_RETRY_DELAY:-1.0}
              - EMBEDDING_RETRY_DELAY=\${EMBEDDING_RETRY_DELAY:-1.0}
              - EMBEDDING_MAX_TEXT_LENGTH=\${EMBEDDING_MAX_TEXT_LENGTH:-1000}
              - LLM_MAX_TOKENS=\${LLM_MAX_TOKENS:-10000}
              - LLM_JSON_PARSE_RETRIES=\${LLM_JSON_PARSE_RETRIES:-3}
              - RABBITMQ_MAX_DELIVERY_RETRIES=\${RABBITMQ_MAX_DELIVERY_RETRIES:-5}
            networks: {}
            depends_on:
              - rabbitmq

          processor:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-processor:${{ steps.meta.outputs.version }}
            restart: unless-stopped
            environment:
              - SERVICE=processor
              - RABBITMQ_HOST=rabbitmq
              - RABBITMQ_PORT=5672
              - RABBITMQ_USER=\${RABBITMQ_USER}
              - RABBITMQ_PASS=\${RABBITMQ_PASS}
              - DB_HOST=kaiten-test-db
              - DB_PORT=5432
              - DB_USER=\${DB_USER}
              - DB_PASSWORD=\${DB_PASSWORD}
              - DB_NAME=\${DB_NAME}
            networks: {}
            depends_on:
              - rabbitmq
              - kaiten-test-db

          # Fetcher (запуск по требованию)
          fetcher:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-fetcher:${{ steps.meta.outputs.version }}
            environment:
              - SERVICE=fetcher
              - KAITEN_HOST=\${KAITEN_HOST}
              - KAITEN_API_KEY=\${KAITEN_API_KEY}
              - RABBITMQ_HOST=rabbitmq
              - RABBITMQ_PORT=5672
              - RABBITMQ_USER=\${RABBITMQ_USER}
              - RABBITMQ_PASS=\${RABBITMQ_PASS}
              - SPACE_ID=\${SPACE_ID}
              - COLUMN_ID=\${COLUMN_ID}
              - LIMIT=\${LIMIT:-100}
              - EXCLUDED_COMMENT_AUTHORS=\${EXCLUDED_COMMENT_AUTHORS:-bot,automation}
              - KAITEN_RATE_LIMIT_RPS=\${KAITEN_RATE_LIMIT_RPS:-1.0}
            profiles:
              - fetcher
            restart: "no"
            depends_on:
              - rabbitmq

        volumes:
          db:
            driver: local
          rabbitmq_data:
            driver: local

        networks: {}
        EOF

    - name: Upload Docker Compose file
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose
        path: docker-compose.yml
