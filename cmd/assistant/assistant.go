package main

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"sync"
	"time"

	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
	"github.com/tempizhere/incfactory/internal/db"
	"github.com/tempizhere/incfactory/internal/queue"
	"github.com/tempizhere/incfactory/internal/types"
)

// –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: Stateless –±–µ–∑ in-memory –∫–∞–Ω–∞–ª–æ–≤
type AssistantService struct {
	mu sync.RWMutex
	// –ö–∞–Ω–∞–ª—ã –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ correlation_id
	resultChans map[string]chan *types.LLMResult
	resultMu    sync.RWMutex
}

var assistant = &AssistantService{
	resultChans: make(map[string]chan *types.LLMResult),
}

// –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func (a *AssistantService) waitForLLMResult(ctx context.Context, correlationID string, timeout time.Duration) (*types.LLMResult, error) {
	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	resultChan := make(chan *types.LLMResult, 1)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ correlation_id
	a.resultMu.Lock()
	a.resultChans[correlationID] = resultChan
	a.resultMu.Unlock()

	// –û—á–∏—â–∞–µ–º –∫–∞–Ω–∞–ª –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
	defer func() {
		a.resultMu.Lock()
		delete(a.resultChans, correlationID)
		a.resultMu.Unlock()
	}()

	// –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	select {
	case result := <-resultChan:
		return result, nil
	case <-ctx.Done():
		return nil, fmt.Errorf("timeout –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è correlation_id: %s", correlationID)
	case <-time.After(timeout):
		return nil, fmt.Errorf("timeout –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è correlation_id: %s", correlationID)
	}
}

// –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
func (a *AssistantService) processNewCard(w http.ResponseWriter, r *http.Request) {
	fmt.Printf("üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞\n")

	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
	var card struct {
		ID          int    `json:"id"`
		Title       string `json:"title"`
		Description string `json:"description"`
		BoardID     int    `json:"board_id"`
		ColumnID    int    `json:"column_id"`
		SpaceID     string `json:"space_id"`
		Parents     []struct {
			ID int `json:"id"`
		} `json:"parents"`
		Created string `json:"created"`
	}

	if err := json.NewDecoder(r.Body).Decode(&card); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", http.StatusBadRequest)
		return
	}

	if card.Description == "" {
		http.Error(w, "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", http.StatusBadRequest)
		return
	}

	fmt.Printf("üìù –ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: ID=%d, Title=%s, Description=%s\n", card.ID, card.Title, card.Description)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º correlation ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
	correlationID := fmt.Sprintf("assist-%d", time.Now().UnixNano())
	fmt.Printf("üÜî –°–æ–∑–¥–∞–Ω correlation_id: %s\n", correlationID)

	// 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
	fmt.Printf("üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞\n")
	embTask := types.LLMTask{
		RequestID:     fmt.Sprintf("assist-emb-%s", correlationID),
		CorrelationID: correlationID,
		Source:        "assistant",
		Type:          "embedding",
		Payload: types.EmbeddingRequest{
			SourceID:   "query",
			SourceType: "query",
			Text:       card.Description,
		},
	}

	fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ embTask: %s\n", embTask.RequestID)
	if err := queue.PublishLLMTask(embTask); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: %v\n", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏", http.StatusInternalServerError)
		return
	}
	fmt.Printf("‚úÖ –ó–∞–¥–∞—á–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, request_id: %s\n", embTask.RequestID)

	// 2. –û–∂–∏–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	embResult, err := a.waitForLLMResult(ctx, correlationID, 60*time.Second)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: %v\n", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞", http.StatusInternalServerError)
		return
	}

	fmt.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥: %s\n", embResult.RequestID)

	// 3. –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
	var embResponse types.EmbeddingResponse
	if err := json.Unmarshal(embResult.Payload, &embResponse); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: %v\n", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞", http.StatusInternalServerError)
		return
	}

	if embResponse.Error != "" {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–µ: %s\n", embResponse.Error)
		http.Error(w, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞", http.StatusInternalServerError)
		return
	}

	// 4. –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	fmt.Printf("üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫\n")
	similarCards, err := db.FindSimilarCards(embResponse.Embedding, 5)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: %v\n", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫", http.StatusInternalServerError)
		return
	}

	fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –ø–æ—Ö–æ–∂–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫\n", len(similarCards))

	// 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
	contextStr := ""
	for _, card := range similarCards {
		contextStr += fmt.Sprintf("Card ID: %s\nSummary: %s\nSolution: %s\n\n",
			card.ID, card.Summary, card.Solution)
	}

	// 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
	fmt.Printf("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n")
	recTask := types.LLMTask{
		RequestID:     fmt.Sprintf("assist-rec-%s", correlationID),
		CorrelationID: correlationID,
		Source:        "assistant",
		Type:          "recommendation",
		Payload: types.LLMRequest{
			CardID: "assistant_query",
			Messages: []types.Message{
				{
					Role:    "system",
					Content: fmt.Sprintf("–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤. –î–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ '%s' –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (%s) –≤–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [{ \"similar_cards\": [{\"card_id\": string, \"similarity\": string}, ...], \"recommended_solution\": \"—Å—Ç—Ä–æ–∫–∞ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤\" }]. –ü—Ä–∞–≤–∏–ª–∞: \n- similar_cards: –¥–æ 5 –æ–±—ä–µ–∫—Ç–æ–≤ —Å card_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∏—Ö similarity (–≤ —Ñ–æ—Ä–º–∞—Ç–µ '90%%'), —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø—Ä–æ—Å—É –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–≤–∞—è). \n- recommended_solution: –∏–∑–≤–ª–µ–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è (SQL-–∑–∞–ø—Ä–æ—Å—ã, –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ '–ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ë–î', '—Å–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É', '–ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ë–î') –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç–æ–ø-5 –ø–æ—Ö–æ–∂–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫. –ù–æ—Ä–º–∞–ª–∏–∑—É–π —Ç–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏–π (—É–¥–∞–ª–∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫). –°—Ä–∞–≤–Ω–∏ —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é. –ï—Å–ª–∏ ‚â•3 –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏ –µ–≥–æ. –ò–Ω–∞—á–µ –≤—ã–±–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–∏–≤—ã—Å—à–µ–π similarity. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞–º–∏ (URL), —Å—Ç–∞—Ç—É—Å–∞–º–∏ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ('—Ä–µ—à–∞–µ—Ç—Å—è –Ω–∞ L3', '—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ', '—á–µ–∫ —Å–æ–∑–¥–∞–Ω', '—á–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω', '–∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É'), –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ ('–ø—Ä–∏–º–µ—Ä –¥–ª—è —Ç—Å3') –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π. –£–∫–∞–∂–∏ card_id –≤ —Å–∫–æ–±–∫–∞—Ö. –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–µ—Ç, –≤–µ—Ä–Ω–∏: \"–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\" \n- –û—Ç–≤–µ—Ç ‚Äî —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON, —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –±–µ–∑ ```json, ```, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –≤–Ω–µ JSON.", card.Description, contextStr),
				},
				{
					Role:    "user",
					Content: card.Description,
				},
			},
		},
	}

	fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ recTask: %s\n", recTask.RequestID)
	if err := queue.PublishLLMTask(recTask); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: %v\n", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏", http.StatusInternalServerError)
		return
	}
	fmt.Printf("‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, request_id: %s\n", recTask.RequestID)

	// 7. –û–∂–∏–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
	ctx2, cancel2 := context.WithTimeout(context.Background(), 120*time.Second)
	defer cancel2()

	recResult, err := a.waitForLLMResult(ctx2, correlationID, 120*time.Second)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: %v\n", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", http.StatusInternalServerError)
		return
	}

	fmt.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: %s\n", recResult.RequestID)

	// 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	response := map[string]interface{}{
		"correlation_id": correlationID,
		"request_id":     recResult.RequestID,
		"result":         json.RawMessage(recResult.Payload),
	}

	if err := json.NewEncoder(w).Encode(response); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v\n", err)
		http.Error(w, "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞", http.StatusInternalServerError)
		return
	}

	fmt.Printf("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è correlation_id: %s\n", correlationID)
}

// startConsumer –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func (a *AssistantService) startConsumer() {
	go func() {
		for {
			// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
			msgs, err := queue.ConsumeLLMResults()
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ llm_results: %v\n", err)
				time.Sleep(5 * time.Second) // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
				continue
			}

			fmt.Printf("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ llm_results_assistant\n")

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
			for msg := range msgs {
				var llmResult types.LLMResult
				if err := json.Unmarshal(msg.Body, &llmResult); err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v\n", err)
					msg.Ack(false)
					continue
				}

				fmt.Printf("üì® –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: correlation_id=%s, request_id=%s, type=%s\n",
					llmResult.CorrelationID, llmResult.RequestID, llmResult.Type)

				// –ò—â–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ correlation_id
				a.resultMu.RLock()
				resultChan, exists := a.resultChans[llmResult.CorrelationID]
				a.resultMu.RUnlock()

				if exists {
					fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è correlation_id: %s\n", llmResult.CorrelationID)
					msg.Ack(false)
					resultChan <- &llmResult
				} else {
					fmt.Printf("‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è correlation_id: %s\n", llmResult.CorrelationID)
					msg.Ack(false)
				}
			}

			fmt.Printf("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—á–µ—Ä–µ–¥–∏ llm_results_assistant\n")
		}
	}()
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
	if os.Getenv("RABBITMQ_HOST") == "" || os.Getenv("DB_HOST") == "" {
		if err := godotenv.Load(); err != nil {
			fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: %v\n", err)
		}
	}

	config := struct {
		RabbitMQHost string
		RabbitMQPort string
		RabbitMQUser string
		RabbitMQPass string
		DBHost       string
		DBPort       string
		DBUser       string
		DBPassword   string
		DBName       string
	}{
		RabbitMQHost: os.Getenv("RABBITMQ_HOST"),
		RabbitMQPort: os.Getenv("RABBITMQ_PORT"),
		RabbitMQUser: os.Getenv("RABBITMQ_USER"),
		RabbitMQPass: os.Getenv("RABBITMQ_PASS"),
		DBHost:       os.Getenv("DB_HOST"),
		DBPort:       os.Getenv("DB_PORT"),
		DBUser:       os.Getenv("DB_USER"),
		DBPassword:   os.Getenv("DB_PASSWORD"),
		DBName:       os.Getenv("DB_NAME"),
	}

	for _, env := range []string{
		"RABBITMQ_HOST", "RABBITMQ_PORT", "RABBITMQ_USER", "RABBITMQ_PASS",
		"DB_HOST", "DB_PORT", "DB_USER", "DB_PASSWORD", "DB_NAME",
	} {
		if os.Getenv(env) == "" {
			fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è %s –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n", env)
			os.Exit(1)
		}
	}

	fmt.Printf("Assistant –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ RabbitMQ: %s:%s (user: %s)\n",
		config.RabbitMQHost, config.RabbitMQPort, config.RabbitMQUser)
	if err := queue.Init(config.RabbitMQHost, config.RabbitMQPort, config.RabbitMQUser, config.RabbitMQPass); err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RabbitMQ: %v\n", err)
		os.Exit(1)
	}
	fmt.Printf("Assistant —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ RabbitMQ\n")
	defer queue.Close()

	if err := db.Init(config.DBHost, config.DBPort, config.DBUser, config.DBPassword, config.DBName); err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL: %v\n", err)
		os.Exit(1)
	}
	defer db.Close()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ consumer'–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n")
	assistant.startConsumer()

	// –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –û–¥–∏–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π consumer –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ Assistant —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π\n")

	r := mux.NewRouter()
	r.HandleFunc("/assistant", assistant.processNewCard).Methods("POST")
	r.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"status":    "ok",
			"service":   "assistant",
			"timestamp": time.Now().Unix(),
		})
	}).Methods("GET")

	fmt.Fprintf(os.Stderr, "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ :8080\n")
	fmt.Fprintf(os.Stderr, "Assistant –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π\n")
	if err := http.ListenAndServe(":8080", r); err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		os.Exit(1)
	}
}
